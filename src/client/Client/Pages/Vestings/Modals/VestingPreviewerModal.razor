<MudContainer MaxWidth="MaxWidth.False" Style="max-height: 80vh; overflow-y: scroll">
    <MudDialog DisableSidePadding="true" ClassActions="px-2 py-4">
        <DialogContent>
            <MudGrid Class="pt-0 pb-4" Spacing="2">
                @if (!IsLoaded)
                {
                    <MudItem xs="12">
                        <MudSkeleton Height="100px" Width="100%" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" />
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.body1" Class="text-white mb-2"><b>Asset</b></MudText>
                            <MudText Typo="Typo.body1" Class="text-white mb-2">@Model.AssetToken.Name (@Model.AssetToken.Symbol)</MudText>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.body1" Class="text-white mb-2"><b>Status</b></MudText>
                            <MudText Typo="Typo.body1" Class="text-white mb-2">@Model.StatusDisplay</MudText>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.body1" Class="text-white mb-2"><b>Initiator</b></MudText>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                                <MudText Typo="Typo.body1" Class="text-white mb-2">@Model.InitiatorAddressDisplay.ToMask(6)</MudText>

                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                                <MudText Typo="Typo.body1" Class="text-white mb-2">@Model.InitiatorAddressDisplay</MudText>

                            </MudHidden>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.caption" Class="text-white mb-2"><b>Date Created</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-white mb-2">@Model.DateCreationDisplay</MudText>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.caption" Class="text-white mb-2"><b>Revocable</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-white mb-2">@Model.RevocableDisplay</MudText>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div>
                            <MudText Typo="Typo.caption" Class="text-white mb-2"><b>Total Amount</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-white mb-2">@Model.TotalAmountDisplay</MudText>
                        </div>
                    </MudItem>

                    <MudItem xs="12">
                        <div>
                            <MudText Typo="Typo.caption" Class="text-white mb-2"><b>Periods</b></MudText>

                            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Left">
                                @foreach (var period in Model.Transaction.Periods)
                                {
                                    <MudTimelineItem Color="@(period.UnlockTime < DateTime.UtcNow ? Color.Primary : Color.Default)">
                                        <ItemContent>
                                            <MudText Color="Color.Primary">
                                                <span class="cursor-pointer" @onclick="(() => InvokeVestingPeriodPreviewerModal(period))">@period.Name </span>
                                            </MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Model.Transaction.Receivers.Where(x => x.PeriodIndex == period.PeriodIndex).Count() Receivers • @Model.Transaction.Receivers.Where(x => x.PeriodIndex == period.PeriodIndex).Sum(x => x.Amount.ToAmount(Model.AssetToken.Decimals)).ToAmountDisplay(Model.AssetToken.Decimals) @Model.AssetToken.Symbol</MudText>
                                            <MudText Typo="Typo.caption" Class="mud-text-secondary">@period.UnlockTime.ToString(ClientConstants.LongDateTimeFormat)</MudText>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        </div>
                    </MudItem>
                }
            </MudGrid>
        </DialogContent>
    </MudDialog>
</MudContainer>
